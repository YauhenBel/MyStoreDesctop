package interfaces;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.scene.image.Image;
import javafx.scene.text.Text;
import objects.Product;

import javafx.scene.image.ImageView;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

//класс для работы со списком продукции

public class CollectionListProducts  implements ListObjects {
//список продукции
    private ObservableList<Product> productList =
            FXCollections.observableArrayList();
//добавить новый продукт в общий список
    public void addLastSelect(Product product){
        productList.add(product);
    }
    //добавляем информацию о новом продукте в БД и возвращаем сформированный объект продукта
    @Override
    public Product add(Product product) {
        Product lastProduct = null;
        String id, name, description, photo, cost, available, idSection;
        id = product.getId();
        name = product.getName().getText();
        description = product.getDescription().getText();
        photo = product.getPhoto();
        cost = product.getCost();
        available = product.getAvailable();
        idSection = product.getIdSection();
        try {
            Class.forName("com.mysql.jdbc.Driver");
            String url = "jdbc:mysql://localhost:3306/store?useUnicode=true&characterEncoding=utf-8";
            String login = "root";
            String password = "";
            Connection con = DriverManager.getConnection(url, login, password);
            try {
                Statement stmt = con.createStatement();
                String sql_query = "INSERT INTO `products`(`id`, `name`, `description`, `photo`, `cost`, `available`, `id_section`)" +
                        " VALUES(NULL,"
                        + "'" + name + "', "
                        + "'" + description + "', "
                        + "'" + photo + "', "
                        + "'" + cost + "', "
                        + "'" + available + "', "
                        + "'" + idSection + "')";
                System.out.println(sql_query);
                //System.out.println(staff);
                //int rs = stmt.executeUpdate(sql_query, int autoGeneratedKeys);
                int rss = stmt.executeUpdate(sql_query, Statement.RETURN_GENERATED_KEYS);
                ResultSet rs = stmt.getGeneratedKeys();
                String lastId = "";
                while (rs.next()){
                    lastId = rs.getString(1);
                    System.out.println(rs.getString(1));
                }

                sql_query = "SELECT * FROM `products` WHERE `id`=" + lastId;
                System.out.println(sql_query);
                rs = stmt.executeQuery(sql_query);

                while (rs.next()) {
                    String lastRecord = "{\nid = " + rs.getString("id")
                            + ",\nname = " + rs.getString("name")
                            + ",\ndescription = " + rs.getString("description")
                            + ",\nphoto = " + rs.getString("photo")
                            + ",\ncost = " + rs.getString("cost")
                            + ",\navailable = " + rs.getString("available")
                            + ",\n\tid_section = " + rs.getString("id_section")
                            + ";\n}";
                    System.out.println("info: " + lastRecord);
                    String lastRecordid = rs.getString("id");
                    String lastRecordname =rs.getString("name");
                    String lastRecorddescription = rs.getString("description");
                    String lastRecordphoto = rs.getString("photo");
                    String lastRecordcost = rs.getString("cost");
                    String lastRecordavailable = rs.getString("available");
                    String lastRecordid_section = rs.getString("id_section");
                    Image lastRecordimage = new Image("http://127.0.0.1/my%20portable%20files/image/"+lastRecordphoto);
                    ImageView lastRecordimageView = new ImageView(lastRecordimage);
                    Text lastRecordtextName = new Text(lastRecordname);
                    Text lastRecordtextDescription = new Text(lastRecorddescription);
                    lastProduct = new Product(lastRecordid, lastRecordtextDescription, lastRecordcost,
                            lastRecordavailable, lastRecordid_section,
                            lastRecordimageView, lastRecordtextName, lastRecordphoto);
                    productList.add(lastProduct);
                }
                rs.close();
                stmt.close();
            } finally {
                con.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return lastProduct;
    }
    //обновляем информацию в БД о продукте
    @Override
    public void update(Product product) {
        String id, name, description, photo, cost, available, idSection;
        id = product.getId();
        name = product.getName().getText();
        description = product.getDescription().getText();
        photo = product.getPhoto();
        cost = product.getCost();
        available = product.getAvailable();
        idSection = product.getIdSection();
        System.out.println("Отправляем в бд: " + id + " " + name + " " + description + " " + photo + " " + cost + " " + available + " " + idSection);
        try {
            Class.forName("com.mysql.jdbc.Driver");
            String url = "jdbc:mysql://localhost:3306/store?useUnicode=true&characterEncoding=utf-8";
            String login = "root";
            String password = "";
            Connection con = DriverManager.getConnection(url, login, password);

            try {
                Statement stmt = con.createStatement();
                String sql_query = "UPDATE `products` SET "
                        + "`name` =  " + "'" + name + "',"
                        + "`description` =  " + "'" + description + "',"
                        + "`photo` =  " + "'" + photo + "',"
                        + "`cost` =  " + "'" + cost + "',"
                        + "`available` =  " + "'" + available + "',"
                        + "`id_section` =  " + "'" + idSection + "'"
                        + " WHERE `products`.`id` = " +id;
                System.out.println(sql_query);
                int rs = stmt.executeUpdate(sql_query);
                System.out.println(rs);
                stmt.close();
            } finally {
                con.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }
    //удаляем продукт
    @Override
    public void delete(Product product) {
        try {
            Class.forName("com.mysql.jdbc.Driver");
            String url = "jdbc:mysql://localhost:3306/store?useUnicode=true&characterEncoding=utf-8";
            String login = "root";
            String password = "";
            Connection con = DriverManager.getConnection(url, login, password);

            try {
                Statement stmt = con.createStatement();
                String sql_query = "DELETE FROM `products`"
                        + " WHERE `products`.`id` = " + product.getId();
                System.out.println(sql_query);
                int rs = stmt.executeUpdate(sql_query);
                System.out.println(rs);
                stmt.close();
            } finally {
                con.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        productList.remove(product);

    }
    //загружаем список продукции
    @Override
    public void fillData() {
        try {
            Class.forName("com.mysql.jdbc.Driver");
            String url = "jdbc:mysql://localhost:3306/store";
            String login = "root";
            String password = "";
            Connection con = DriverManager.getConnection(url, login, password);
            try {
                Statement stmt = con.createStatement();
                String sql_query = "SELECT * FROM `products`";
                System.out.println(sql_query);
                ResultSet rs = stmt.executeQuery(sql_query);

                while (rs.next()) {
                    String str = "{\nid = " + rs.getString("id")
                            + ",\nname = " + rs.getString("name")
                            + ",\ndescription = " + rs.getString("description")
                            + ",\nphoto = " + rs.getString("photo")
                            + ",\ncost = " + rs.getString("cost")
                            + ",\navailable = " + rs.getString("available")
                            + ",\n\tid_section = " + rs.getString("id_section")
                            + ";\n}";
                    System.out.println("info: " + str);
                    String id = rs.getString("id");
                    String name =rs.getString("name");
                    String description = rs.getString("description");
                    String photo = rs.getString("photo");
                    String cost = rs.getString("cost");
                    String available = rs.getString("available");
                    String id_section = rs.getString("id_section");
                    Image image = new Image("http://127.0.0.1/my%20portable%20files/image/"+photo);
                    ImageView imageView = new ImageView(image);
                    Text textName = new Text(name);
                    Text textDescription = new Text(description);
                    productList.add(new Product(id, textDescription, cost, available, id_section, imageView, textName, photo));
                }
                rs.close();
                stmt.close();
            } finally {
                con.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    //возвращаем список
    public ObservableList<Product> getListProduct() {
        return productList;
    }
}
